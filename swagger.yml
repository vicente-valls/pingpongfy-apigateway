swagger: '2.0'

info:
  version: "%version%"
  title: PingPongfy API
  description: |
    Describes restful endpoints for the pingpongfy api.
    ## Structure

    ### The Response
    Each successful response (`2xx` status code) follows same generic schema:
    ```json
    {
        "data": {
            ...
        }
    }
    ```

    On the other hand either client or server errors (`4xx-5xx`) follow this
    schema:
    ```json
    {
        "errors": [{
            ...
        }]
    }
    ```

    #### DATA
    The `data` key contains the information client requested.

    #### ERRORS
    The `errors` key contains `array` of request errors. For example:
    ```json
    {
        "errors": [
          {
            "code": "VALIDATION_ERROR",
            "message": "e-mail must be valid."
          },
          {
            "code": "VALIDATION_ERROR",
            "message": "username already registered."
          }
        ]
    }
    ```

    #### PAGINATION
    Since the amount of objects returned is expected to be small,
      no pagination functionality is needed.

################################################################################
#                  Host, Base Path, Schemes and Content Types                  #
################################################################################
basePath: /v1
schemes:
  - https
produces:
  - application/json
consumes:
  - application/json

################################################################################
#                                   Security                                   #
################################################################################
securityDefinitions:
  PingpongfyUserPool:
      type: apiKey
      description: |
        The api key sent must be the identity token of the signed-in user from the user pool of aws cognito.
         See aws documentation for more information
      name: Authorization
      in: header
      x-amazon-apigateway-authtype: cognito_user_pools
      x-amazon-apigateway-authorizer:
        type: "cognito_user_pools"
        providerARNs:
          - >
            %aws-arn-incognito-pool%

################################################################################
#                                   Paths                                      #
################################################################################
paths:
  /tables:
    get:
      description: Get list of tables
      security:
        - PingpongfyUserPool: []
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Table'
      x-amazon-apigateway-integration:
        type: http
        responses:
          default:
            statusCode: 200
        uri: https://${stageVariables.backendDomain}/v1/tables
        passthroughBehavior: when_no_match
        httpMethod: GET
    post:
      description: Creates a new table
      security:
        - PingpongfyUserPool: []
      parameters:
        - name: body
          in: body
          schema:
            $ref: "#/definitions/CreateTable"
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/definitions/Table'
      x-amazon-apigateway-integration:
        type: http
        responses:
          default:
            statusCode: 200
        uri: https://${stageVariables.backendDomain}/v1/tables
        passthroughBehavior: when_no_match
        httpMethod: POST
  /tables/{tableId}/update-status-schedule:
    post:
      description: creates new schedule to update table status
      security:
        - PingpongfyUserPool: []
      parameters:
        - name: tableId
          in: path
          type: number
          required: true
      responses:
        200:
          description: OK
      x-amazon-apigateway-integration:
        type: http
        responses:
          default:
            statusCode: 200
        requestParameters:
          integration.request.path.tableId: method.request.path.tableId
        uri: https://${stageVariables.backendDomain}/v1/tables/{tableId}/update-status-schedule
        passthroughBehavior: when_no_match
        httpMethod: POST

################################################################################
#                                 Definitions                                  #
################################################################################
definitions:
  CreateTable:
    type: object
    required:
      - name
    properties:
      name:
        type: string
      description:
        type: string
  Table:
    type: object
    properties:
      id:
        type: integer
      name:
        type: string
      description:
        type: string
      isFree:
        type: boolean
      updatedAt:
        type: string
        description: iso8601 format
